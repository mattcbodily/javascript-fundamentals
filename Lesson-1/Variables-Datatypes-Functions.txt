Lesson One: Variables, Data Types, and Functions


What are Variables in Javascript?

/// The Concept ///

You can think of variables as boxes that store data. Variables are created 
to store information that we can use throughout our web application. This 
data can range from numbers and words, to many other data types that we discuss 
later in this section.

/// The Syntax ///

To create, or declare, a variable, we will need to use the 'var' keyword.
Following the 'var' keyword we will put the '=' symbol, which is known as 
the assignment operator in Javascript. The assignment operator allows us 
to assign a value to our variable. Finally, following the assignment
operator will be the value we are assigning to our variable.

Example:

var age = 27;


What are Data Types?

/// The Concept ///

When declaring variables, we can assign many different types of data to 
them.  In Javascript, there are seven data types, they are:

1. String
2. Number
3. Boolean
4. Object
5. Undefined
6. Null
7. Symbol

* String *

Strings are values that are surrounded by quotes("", '', or ``). The 
characters inside the string can be anything from letters to numbers 
to symbols.

Example:

var string = "I am a string";

* Number *

Numbers refer to any numbers(including decimals) that are not found 
in a string.

Example:

var number = 11;

* Boolean *

Booleans have only two values: true and false.

Example:

var boolean = true;

* Object *

Objects refer to collection of related data.  They contain key/value 
pairs that give us a description of what the data is(key) and what 
it's value is(value). They are easily identified by the {} surrounding 
them. Objects will be discussed more in depth during lesson two.

Example:

var object = {
    type: 'Object'
};

* Undefined *

Undefined is a data type in Javascript that occurs when we have 
declared(created) a variable without giving it a value.

Example:

var undefined;  <-- A variable called undefined is declared but never given a value.

* Null *

Null is a data type that represents 'nothing'. Unlike the undefined 
data type, you must assign null as the value of the variable.

Example:

var nothing = null;

* Symbol *

The symbol data type is a relatively new data type in Javascript, 
introduced in ES6. More on this data type and how to use it will 
be found in lesson seven along with other ES6 topics.


Operators? <-- This section may need to be moved depending on how the curriculum flows.


Functions <-- Possibly expand this section.

/// The Concept ///

While it's great that variables store values, we often want to 
do something with that data. Functions allow us to perform 'actions' 
in our code, including changing and using the values that we have 
stored in our code.

/// The Syntax ///

* Function Declaration *

There are a couple ways we can create functions, which we will cover 
here.  The first is called Function Declaration.  When declaring a 
function we start by using the built in 'function' keyword. Following 
the function keyword, we name our function, much like we would name a 
variable following the 'var' keyword. Following are functions name we 
put parentheses: (). Inside the parentheses are a place where we can 
define values that can be passed into this function for the function
to use. When declaring our function, these are called 'parameters'.
Following our parentheses, we put curly brackets: {}. Inside the curly 
brackets we write what we would like this function to do, whether that's 
adding two numbers together, or building a sentence from passed in strings. 
The possibilities are endless!

Example: 
function add(){
    return 2 + 2;
};

What is this function doing? 

In this example we have created a function called add. The add function 
simply adds 2 + 2 and returns the value.  The RETURN keyword is what 
allows us to return values out of a function. If we don't include the 
return keyword, our function will perform the action but won't return 
anything out of it!

* Function Expression

Function expressions are very similar to function declarations, with 
only one key difference. To create a function using an expression we 
start by using the 'var' keyword, and following that with the name 
we want to give the function. Following that we use the assignment 
operator and set our newly named variable a value of a function, using 
the 'function' keyword. We don't follow the function keyword with a 
name, because we already named our function when declaring our variable. 
The rest of the syntax follows the same pattern as function declaration.

Example:
var add = function(){
    return 2 + 2;
};