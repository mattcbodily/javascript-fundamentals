LESSON ONE - VARIABLES, DATA TYPES, OPERATORS


// * VARIABLES * //

What is a variable in Javascript?

You can think of a variable as a container that stores data we need 
in our web application.


Creating Variables

To create, or declare, a variable, we will start by using the 
'var' keyword. This keyword is followed by the name we are giving 
our variable. The name of the variable can be pretty much anything, 
but there are a couple conventions you should follow:

    1. Variable names should NOT start with a number, but instead a 
       letter or an underscore. Variable names can include numbers, 
       but shouldn't start with them.
    2. Variable names should be in camelCase(first letter lowercase, 
       all other words start with uppercase, like the camelCase word 
       above.)

It would be a good idea to also name your variable in a way that it 
makes it easy to see what kind of data it is holding. For example, 
maybe you have a variable that's holding your favorite number as its 
value. You would probably want that variable to be named something 
along the lines of favoriteNumber or favNum, so it's easily 
identifiable.

After we have named our variable we will use the equal sign(=). In 
Javascript, the '=' symbol is known as the assignment operator(more 
on operators below). We use the assignment operator to assign a value 
to our variables. Following the assignment operator, we put the value 
that we would like to assign to our variable.

-- Example --

var favNum = 11;



// * DATA TYPES * //

What are data types?

We can assign many different values to our variables. Those values fall 
into categories we call data types. In Javascript, there are seven data 
types:

    1. String
    2. Number
    3. Boolean
    4. Object
    5. Undefined
    6. Null
    7. Symbol


* String *

Strings are values that are wrapped in quotes("", '', or ``). The characters 
inside the quotes can be letters, numbers, and special characters.

-- Example --

var greetings = "Hello World!";


* Number *

Numbers refer to any number(including decimals) that is not wrapped in quotes.

-- Example --

var favNum = 11;


* Boolean *

Booleans only have two values: true and false. 

-- Example --

var javascriptIsAwesome = true;


* Object *

Objects refer to collections of related data. They contain key/value pairs 
that give us a description of what the data is(key) and what it's value is. 
They are easily identified by the curly brackets: {}, that surround them. 
Objects will be covered more in depth in lesson three.

-- Example --

var exampleObject = {
  coolObject: true  
};


* Undefined *

Undefined is a data tye in Javascript that occurs when we have declared(created) 
a variable without giving it a value. 

-- Example --

var notDefined;


* Null *

Null is a data type that represents 'nothing'. Unlike the undefined data type, 
you must assign null as the value of the variable.

-- Example --

var nothing = null;


* Symbol *

The symbol data type is a relatively new data type in Javascript, introduced 
in ES6. More on this data type and how to use it will be found in lesson seven, 
along with other ES6 topics.



// * OPERATORS * //

What are operators?

Operators in Javascript allow us to perform an operation on one or 
more values. These operations can include value assignment, 
math operations(such as addition), value comparison, and more.


* Assignment Operator *

The assignment operator in Javascript is the '=' symbol. This allows us to 
assign a value to a variable.

-- Example --

var assignment = true;



* Math Operators *

In Javascript we can perform math operations through the use of 
many familiar operators.  They are:

Addition:         +
Subtraction:      -
Multiplication:   *
Division:         /

-- Examples --

In these examples we are simply setting the values the add and multiply 
variables to two numbers added, and multiplied together.

var add = 2 + 2;
var multiply = 5 * 5;


In these examples we are declaring two variables and setting them 
equal to two different numbers. We are then declaring variables called 
add and multiply, that are adding, or multiplying the number variables 
together.

var numOne = 2;
var numTwo = 5;

var add = numOne + numTwo;
var multiply = numOne * numTwo;


Math operators are used often, and because of that there are 
shorthand ways to use them. They are:

Addition:        +=
Subtraction:     -=
Multiplication:  *=
Division:        /=

By combining our math operators with the assignment operator, it allows 
us to avoid redundant code.

-- Examples --

In the example below, we created two variables, called numOne and 
numTwo. We are than using the += operator to add together numOne 
and numTwo, to result in numOne being 7.

var numOne = 2;
var numTwo = 5;

numOne += numTwo;


In Javascript we also have access to the increment and decrement 
operators. These operators will add or subtract one to a given value.

Increment:   ++
Decrement:   --

-- Example --

In the example below we are declaring a variable and setting its value 
to 2. We are then incrementing that variable, so no numOne has a value 
of 3.

var numOne = 2;

numOne++;



* Comparison Operators *

Comparison operators will return true or false based off of the values 
they are given. These operators allow us to compare values.

Equal to:                   ==
Stricly equal to:           ===
Not equal to:               !==
Greater than:               >
Greater than or equal to:   >=
Less than:                  <
Less than or equal to:      <=


What is the difference between '==' and '==='?

Both the triple equal and double equal operators compare if two values 
are equal to each other. The difference is that the triple equal operator 
won't consider two values of different data types equal, where the double 
equal may coerce the data types to be the same. For example:

3 === '3'  <-- This returns false

3 == '3'   <-- This returns true


Comparison operators will be used more in depth during lesson two when 
we learn about functions.

-- Examples --

3 !== 4    <-- This returns true

3 !== '3'  <-- This returns true

3 >= 4     <-- This returns false

3 <= 4     <-- This returns true



// * Truthy and Falsy Values * //

Everything in Javascript has either a true value(truthy) or a 
false value(falsy). The vast majority of values are truthy values, but 
there are six falsy values, and they are:

    1. false
    2. 0 (the number, not 0 in a string)
    3. "", '', or `` (an empty string)
    4. null
    5. undefined
    6. NaN (this represents Not a Number)